import React, { useState } from "react";

interface Props {
  onClose: () => void;
  onConfirm: (address: string) => void;
}

const provinces: Record<string, string[]> = {
  "TP. H·ªì Ch√≠ Minh": [
    "Qu·∫≠n 1",
    "Qu·∫≠n 3",
    "Qu·∫≠n 5",
    "Qu·∫≠n 7",
    "Qu·∫≠n 10",
    "Qu·∫≠n 11",
    "Qu·∫≠n 12",
    "Qu·∫≠n T√¢n B√¨nh",
    "Qu·∫≠n B√¨nh Th·∫°nh",
    "Qu·∫≠n Ph√∫ Nhu·∫≠n",
    "Th·ªß ƒê·ª©c",
    "H√≥c M√¥n",
    "C·ªß Chi",
  ],
  "H√† N·ªôi": [
    "Ba ƒê√¨nh",
    "Ho√†n Ki·∫øm",
    "C·∫ßu Gi·∫•y",
    "Thanh Xu√¢n",
    "ƒê·ªëng ƒêa",
    "H√† ƒê√¥ng",
    "Nam T·ª´ Li√™m",
    "B·∫Øc T·ª´ Li√™m",
    "Long Bi√™n",
    "Ho√†ng Mai",
  ],
  "ƒê√† N·∫µng": [
    "H·∫£i Ch√¢u",
    "Thanh Kh√™",
    "Li√™n Chi·ªÉu",
    "S∆°n Tr√†",
    "Ng≈© H√†nh S∆°n",
    "C·∫©m L·ªá",
    "H√≤a Vang",
  ],
  "C·∫ßn Th∆°": [
    "Ninh Ki·ªÅu",
    "B√¨nh Th·ªßy",
    "C√°i RƒÉng",
    "√î M√¥n",
    "Th·ªët N·ªët",
    "Phong ƒêi·ªÅn",
  ],
  "H·∫£i Ph√≤ng": [
    "H·ªìng B√†ng",
    "Ng√¥ Quy·ªÅn",
    "L√™ Ch√¢n",
    "H·∫£i An",
    "D∆∞∆°ng Kinh",
    "Ki·∫øn An",
    "Th·ªßy Nguy√™n",
    "An D∆∞∆°ng",
  ],
  "B√¨nh D∆∞∆°ng": ["Th·ªß D·∫ßu M·ªôt", "Dƒ© An", "Thu·∫≠n An", "B·∫øn C√°t", "T√¢n Uy√™n"],
  "ƒê·ªìng Nai": [
    "Bi√™n H√≤a",
    "Long Kh√°nh",
    "Tr·∫£ng Bom",
    "Long Th√†nh",
    "Nh∆°n Tr·∫°ch",
  ],
  "Kh√°nh H√≤a": ["Nha Trang", "Cam Ranh", "Di√™n Kh√°nh", "Ninh H√≤a", "V·∫°n Ninh"],
  "L√¢m ƒê·ªìng": ["ƒê√† L·∫°t", "B·∫£o L·ªôc", "ƒê·ª©c Tr·ªçng", "Di Linh"],
  "B√¨nh Thu·∫≠n": ["Phan Thi·∫øt", "La Gi", "B·∫Øc B√¨nh", "H√†m Thu·∫≠n Nam"],
};

const COD: React.FC<Props> = ({ onClose, onConfirm }) => {
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [province, setProvince] = useState("");
  const [district, setDistrict] = useState("");
  const [detail, setDetail] = useState("");

  const handleConfirm = () => {
    if (
      !name.trim() ||
      !phone.trim() ||
      !province ||
      !district ||
      !detail.trim()
    ) {
      alert("‚ùó Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
      return;
    }

    const fullAddress = `üë§ ${name}\nüìû ${phone}\nüè† ${detail}, ${district}, ${province}`;
    onConfirm(fullAddress);
  };

  const handleProvinceChange = (value: string) => {
    setProvince(value);
    setDistrict(""); // reset qu·∫≠n khi ƒë·ªïi t·ªânh
  };

  return (
    <div
      className="modal d-block"
      style={{
        backgroundColor: "rgba(0,0,0,0.5)",
        position: "fixed",
        top: 0,
        left: 0,
        width: "100vw",
        height: "100vh",
        zIndex: 9999,
      }}
      onClick={onClose}
    >
      <div
        className="modal-dialog modal-dialog-centered"
        style={{ maxWidth: "500px", width: "95%" }}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="modal-content p-4 border-0 rounded shadow">
          <h5 className="mb-3 text-center fw-bold text-primary">
            Th√¥ng tin giao h√†ng
          </h5>

          <div className="form-group text-start mb-2">
            <label>H·ªç t√™n ng∆∞·ªùi nh·∫≠n:</label>
            <input
              type="text"
              className="form-control"
              placeholder="Nguy·ªÖn VƒÉn A"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </div>

          <div className="form-group text-start mb-2">
            <label>S·ªë ƒëi·ªán tho·∫°i:</label>
            <input
              type="tel"
              className="form-control"
              placeholder="09xxxxxxxx"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
            />
          </div>

          <div className="form-group text-start mb-2">
            <label>T·ªânh/Th√†nh ph·ªë:</label>
            <select
              className="form-control"
              value={province}
              onChange={(e) => handleProvinceChange(e.target.value)}
            >
              <option value="">-- Ch·ªçn T·ªânh/Th√†nh ph·ªë --</option>
              {Object.keys(provinces).map((prov) => (
                <option key={prov} value={prov}>
                  {prov}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group text-start mb-2">
            <label>Qu·∫≠n/Huy·ªán:</label>
            <select
              className="form-control"
              value={district}
              onChange={(e) => setDistrict(e.target.value)}
              disabled={!province}
            >
              <option value="">-- Ch·ªçn Qu·∫≠n/Huy·ªán --</option>
              {province &&
                provinces[province].map((dist) => (
                  <option key={dist} value={dist}>
                    {dist}
                  </option>
                ))}
            </select>
          </div>

          <div className="form-group text-start mb-2">
            <label>ƒê·ªãa ch·ªâ chi ti·∫øt:</label>
            <textarea
              className="form-control"
              placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng..."
              rows={2}
              value={detail}
              onChange={(e) => setDetail(e.target.value)}
            />
          </div>

          <div className="d-flex justify-content-end mt-3 gap-2">
            <button className="btn btn-secondary" onClick={onClose}>
              H·ªßy
            </button>
            <button className="btn btn-success" onClick={handleConfirm}>
              X√°c nh·∫≠n
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default COD;
